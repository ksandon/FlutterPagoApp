// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VisaNetSDK
import CardinalMobile
import CommonCrypto
import Foundation
import Security
import Swift
import TMXProfiling
import UIKit
@_exported import VisaNetSDK
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Merchant : ObjectiveC.NSObject {
  @objc deinit
}
extension UIView {
  public enum ViewSide {
    case top
    case right
    case bottom
    case left
    public static func == (a: UIKit.UIView.ViewSide, b: UIKit.UIView.ViewSide) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public func createBorder(side: UIKit.UIView.ViewSide, thickness: CoreGraphics.CGFloat, color: UIKit.UIColor, leftOffset: CoreGraphics.CGFloat = 0, rightOffset: CoreGraphics.CGFloat = 0, topOffset: CoreGraphics.CGFloat = 0, bottomOffset: CoreGraphics.CGFloat = 0) -> QuartzCore.CALayer
  public func createViewBackedBorder(side: UIKit.UIView.ViewSide, thickness: CoreGraphics.CGFloat, color: UIKit.UIColor, leftOffset: CoreGraphics.CGFloat = 0, rightOffset: CoreGraphics.CGFloat = 0, topOffset: CoreGraphics.CGFloat = 0, bottomOffset: CoreGraphics.CGFloat = 0) -> UIKit.UIView
  public func addBorder(side: UIKit.UIView.ViewSide, thickness: CoreGraphics.CGFloat, color: UIKit.UIColor, leftOffset: CoreGraphics.CGFloat = 0, rightOffset: CoreGraphics.CGFloat = 0, topOffset: CoreGraphics.CGFloat = 0, bottomOffset: CoreGraphics.CGFloat = 0)
  public func addViewBackedBorder(side: UIKit.UIView.ViewSide, thickness: CoreGraphics.CGFloat, color: UIKit.UIColor, leftOffset: CoreGraphics.CGFloat = 0, rightOffset: CoreGraphics.CGFloat = 0, topOffset: CoreGraphics.CGFloat = 0, bottomOffset: CoreGraphics.CGFloat = 0)
}
public enum SwiftyRSAError : Swift.Error {
  case pemDoesNotContainKey
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
  case keyGenerationFailed(error: CoreFoundation.CFError?)
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case tagEncodingFailed
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case invalidAsn1Structure
  case invalidBase64String
  case chunkDecryptFailed(index: Swift.Int)
  case chunkEncryptFailed(index: Swift.Int)
  case stringToDataConversionFailed
  case dataToStringConversionFailed
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case pemFileNotFound(name: Swift.String)
  case derFileNotFound(name: Swift.String)
  case notAPublicKey
  case notAPrivateKey
}
public class PrivateKey : VisaNetSDK.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  @objc deinit
}
@objc public enum ServerEnvironment : Swift.Int {
  case dev
  case prod
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CEHeaderType : Swift.Int {
  case logo, text, none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ExpirationDateType : Swift.Int {
  case textField, dropDown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PaymentFrequencyType : Swift.String {
  case monthly
  case quarterly
  case annual
  case biannual
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum DataChannelType : Swift.String {
  case web
  case recurrent
  case mobile
  case callCenter
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum DocumentType : Swift.Int {
  case dni = 0
  case ce = 1
  case passport = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public var visaNetbundle: Foundation.Bundle
public func getLocaleString(key: Swift.String) -> Swift.String
@objc @_inheritsConvenienceInitializers public class Config : ObjectiveC.NSObject {
  public static var merchantID: Swift.String
  public static var merchantNameTitle: Swift.String?
  public static var authorizationHeaderValue: Swift.String
  public static var amount: Swift.Double
  public static var PINSHA256DEV: Swift.String
  public static var PINSHA256PROD: Swift.String
  public static var securityToken: Swift.String {
    get
    set
  }
  public static var tokenizationEmail: Swift.String
  public class func setLocaleValues()
  @_inheritsConvenienceInitializers @objc(ConfigCE) public class CE : ObjectiveC.NSObject {
    public static var showAmount: Swift.Bool
    public static var countable: Swift.Bool
    public static var dataChannel: VisaNetSDK.DataChannelType
    public static var isRecurrenceEnabled: Swift.Bool
    public static var recurrenceType: VisaNetSDK.RecurrenceType
    public static var frequency: VisaNetSDK.Frequency
    public static var uuid: Swift.String?
    public static var chargeAmount: Swift.Double?
    public static var maxAmount: Swift.Double?
    public static var initialAmount: Swift.Double?
    public static var currency: Swift.String
    public static var type: VisaNetSDK.ServerEnvironment
    public static var endPointDevURL: Swift.String
    public static var endPointProdURL: Swift.String
    public static var textFieldFont: UIKit.UIFont?
    public static var buttonColor: UIKit.UIColor
    public static var firstName: Swift.String
    public static var lastName: Swift.String
    public static var email: Swift.String
    public static var phoneNumber: Swift.String
    public static var documentType: VisaNetSDK.DocumentType
    public static var documentNumber: Swift.String
    public static var currentPaymentFrequency: VisaNetSDK.PaymentFrequencyType
    public static var currentPaymentFrequencyAmount: Swift.Double
    public static var purchaseNumber: Swift.String?
    public static var beneficiaryID: Swift.String?
    public static var beneficiaryFirstName: Swift.String?
    public static var beneficiaryLastName: Swift.String?
    public static var productID: Swift.String?
    @_inheritsConvenienceInitializers @objc(ConfigCE_Header) public class Header : ObjectiveC.NSObject {
      public static var type: VisaNetSDK.CEHeaderType
      public static var logoImage: UIKit.UIImage?
      public static var generalFont: UIKit.UIFont?
      public static var titleText: Swift.String?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_CardNumberField) public class CardNumberField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      public static var cameraEnable: Swift.Bool
      public static var font: UIKit.UIFont?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_ExpirationDateField) public class ExpirationDateField : ObjectiveC.NSObject {
      public static var type: VisaNetSDK.ExpirationDateType
      public static var titleText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      public static var defaultText: Swift.String
      public static var placeholder: Swift.String
      @_inheritsConvenienceInitializers @objc(ConfigCE_ExpirationMonthDropDownField) public class MonthDropDownField : ObjectiveC.NSObject {
        public static var placeHolderText: Swift.String
        public static var defaultText: Swift.String
        @objc deinit
        @objc override dynamic public init()
      }
      @_inheritsConvenienceInitializers @objc(ConfigCE_ExpirationYearDropDownField) public class YearDropDownField : ObjectiveC.NSObject {
        public static var maxNumberOfYears: Swift.Int
        public static var placeHolderText: Swift.String
        public static var defaultText: Swift.String
        @objc deinit
        @objc override dynamic public init()
      }
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_CVVField) public class CVVField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_FirstNameField) public class FirstNameField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_LastNameField) public class LastNameField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_EmailField) public class EmailField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_RememberField) public class RememberField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_MaxAmountField) public class MaxAmountField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      @objc deinit
      @objc override dynamic public init()
    }
    @_inheritsConvenienceInitializers @objc(ConfigCE_AddCardButton) public class AddCardButton : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var backgroundColor: UIKit.UIColor
      @objc deinit
      @objc override dynamic public init()
    }
    @objc @_inheritsConvenienceInitializers public class PhoneField : ObjectiveC.NSObject {
      public static var titleText: Swift.String
      public static var placeHolderText: Swift.String
      public static var defaultText: Swift.String
      public static var leftImage: UIKit.UIImage?
      public static var rightImage: UIKit.UIImage?
      @objc deinit
      @objc override dynamic public init()
    }
    @objc @_inheritsConvenienceInitializers public class Antifraud : ObjectiveC.NSObject {
      public static var clientIp: Swift.String
      public static var merchantDefineData: [Swift.String : Any]
      @objc deinit
      @objc override dynamic public init()
    }
    public class func getChannels() -> [VisaNetSDK.DataChannelType]
    public class func getFrequencies() -> [VisaNetSDK.Frequency]
    public class func getDocumentTypes() -> [VisaNetSDK.DocumentType]
    @objc deinit
    @objc override dynamic public init()
  }
  @objc deinit
  @objc override dynamic public init()
}
public class PublicKey : VisaNetSDK.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  public static func publicKeys(pemEncoded pemString: Swift.String) -> [VisaNetSDK.PublicKey]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PaymentViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PaymentViewController : CardinalMobile.CardinalValidationDelegate {
  @objc dynamic public func cardinalSession(cardinalSession session: CardinalMobile.CardinalSession!, stepUpValidated validateResponse: CardinalMobile.CardinalResponse!, serverJWT: Swift.String!)
}
extension PaymentViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension PaymentViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
}
extension PaymentViewController : UIKit.UITextFieldDelegate {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CardNumberFieldView : VisaNetSDK.BulletFieldView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func updateValidationBorder()
  @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc deinit
}
public typealias Padding = Security.SecPadding
public enum SwiftyRSA {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> (privateKey: VisaNetSDK.PrivateKey, publicKey: VisaNetSDK.PublicKey)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable public class BulletFieldView : UIKit.UIView {
  public var textField: VisaNetSDK.VNTextField!
  @objc @IBInspectable public var leftImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var rightImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var rightWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var type: Swift.Int {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func updateValidationBorderBullet()
  @objc override dynamic public func prepareForInterfaceBuilder()
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension BulletFieldView : UIKit.UITextFieldDelegate {
  @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class YapeFont : UIKit.UIFont {
  public class func buildFont(name: Swift.String, size: CoreGraphics.CGFloat = 1.0) -> UIKit.UIFont?
  @objc deinit
  @objc override dynamic public init()
}
public class EncryptedMessage : VisaNetSDK.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  public func decrypted(with key: VisaNetSDK.PrivateKey, padding: VisaNetSDK.Padding) throws -> VisaNetSDK.ClearMessage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CVVFieldView : VisaNetSDK.BulletFieldView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func updateValidationBorder(isRequired: Swift.Bool)
  @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc deinit
}
public class ClearMessage : VisaNetSDK.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  convenience public init(string: Swift.String, using encoding: Swift.String.Encoding) throws
  public func string(encoding: Swift.String.Encoding) throws -> Swift.String
  public func encrypted(with key: VisaNetSDK.PublicKey, padding: VisaNetSDK.Padding) throws -> VisaNetSDK.EncryptedMessage
  public func signed(with key: VisaNetSDK.PrivateKey, digestType: VisaNetSDK.Signature.DigestType) throws -> VisaNetSDK.Signature
  public func verify(with key: VisaNetSDK.PublicKey, signature: VisaNetSDK.Signature, digestType: VisaNetSDK.Signature.DigestType) throws -> Swift.Bool
  @objc deinit
}
public enum RequestResult<Value> {
  case success(Value)
  case failure(Value)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: Value? {
    get
  }
}
public enum RequestMethod : Swift.String {
  case get
  case post
  case put
  case delete
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ResponseType : Swift.String {
  case string
  case dictionary
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol CyberSourceDelegate : AnyObject {
  @objc optional func authFinished(sessionId: Swift.String)
}
@_hasMissingDesignatedInitializers open class CyberSource : VisaNetSDK.CyberSourceDelegate {
  open var delegate: VisaNetSDK.CyberSourceDelegate?
  open func auth(publicKey: Swift.String, isSandbox: Swift.Bool = false)
  @objc deinit
}
public enum RecurrenceTypeConst : Swift.String {
  case fixed
  case fixedInitial
  case variable
  case variableInitial
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class RecurrenceType : ObjectiveC.NSObject {
  public var name: Swift.String
  public var type: VisaNetSDK.RecurrenceTypeConst
  public class func getRecurrenceTypes() -> [VisaNetSDK.RecurrenceType]
  @objc deinit
  @objc override dynamic public init()
}
public class Signature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: VisaNetSDK.Signature.DigestType, b: VisaNetSDK.Signature.DigestType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  convenience public init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Frequency : ObjectiveC.NSObject {
  public var frequencyID: Swift.Int
  public var key: Swift.String
  public var name: Swift.String
  public class func getLocaleStrings() -> [VisaNetSDK.Frequency]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VNTextField : UIKit.UITextField {
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol Key : AnyObject {
  var reference: Security.SecKey { get }
  var originalData: Foundation.Data? { get }
  init(data: Foundation.Data) throws
  init(reference: Security.SecKey) throws
  init(base64Encoded base64String: Swift.String) throws
  init(pemEncoded pemString: Swift.String) throws
  init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  func pemString() throws -> Swift.String
  func data() throws -> Foundation.Data
  func base64String() throws -> Swift.String
}
extension Key {
  public func base64String() throws -> Swift.String
  public func data() throws -> Foundation.Data
  public init(base64Encoded base64String: Swift.String) throws
  public init(pemEncoded pemString: Swift.String) throws
  public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
  public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
}
@objc public enum ExpirationDateFieldType : Swift.Int {
  case dropDown = 1
  case textField = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HeaderLogoType : Swift.Int {
  case image = 1
  case text = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol VisaNetDelegate : AnyObject {
  @objc func registrationDidEnd(serverError: Any?, responseData: Any?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VisaNet : ObjectiveC.NSObject {
  public static let shared: VisaNetSDK.VisaNet
  weak public var delegate: VisaNetSDK.VisaNetDelegate?
  public static var isPersonalDataAllowed: Swift.Bool?
  public static var isRecurrenceAllowed: Swift.Bool?
  public static var isInstallmentsAllowed: Swift.Bool?
  public static var showAmountInPayButton: Swift.Bool
  public static var recurrenceFirstPayment: Swift.Bool
  public static var hidePersonalDataFields: Swift.Bool
  public static var hidePhoneNumberField: Swift.Bool
  public static var hideCountryField: Swift.Bool
  public static var hideCityField: Swift.Bool
  public static var hideFirstPaymentField: Swift.Bool
  public static var hideFixedAmountFields: Swift.Bool
  public static var hideVariableAmountField: Swift.Bool
  public static var hideMaxAmountField: Swift.Bool
  public static var hideRememberCardField: Swift.Bool
  public func presentVisaPaymentForm(viewController: UIKit.UIViewController) -> VisaNetSDK.PaymentViewController?
  @objc deinit
}
extension UIViewController {
  public func presentVisaPaymentForm(amount: Swift.Double) -> VisaNetSDK.PaymentViewController?
}
public protocol Message {
  var data: Foundation.Data { get }
  var base64String: Swift.String { get }
  init(data: Foundation.Data)
  init(base64Encoded base64String: Swift.String) throws
}
extension Message {
  public var base64String: Swift.String {
    get
  }
  public init(base64Encoded base64String: Swift.String) throws
}
extension UIKit.UIView.ViewSide : Swift.Equatable {}
extension UIKit.UIView.ViewSide : Swift.Hashable {}
extension VisaNetSDK.ServerEnvironment : Swift.Equatable {}
extension VisaNetSDK.ServerEnvironment : Swift.Hashable {}
extension VisaNetSDK.ServerEnvironment : Swift.RawRepresentable {}
extension VisaNetSDK.CEHeaderType : Swift.Equatable {}
extension VisaNetSDK.CEHeaderType : Swift.Hashable {}
extension VisaNetSDK.CEHeaderType : Swift.RawRepresentable {}
extension VisaNetSDK.ExpirationDateType : Swift.Equatable {}
extension VisaNetSDK.ExpirationDateType : Swift.Hashable {}
extension VisaNetSDK.ExpirationDateType : Swift.RawRepresentable {}
extension VisaNetSDK.PaymentFrequencyType : Swift.Equatable {}
extension VisaNetSDK.PaymentFrequencyType : Swift.Hashable {}
extension VisaNetSDK.PaymentFrequencyType : Swift.RawRepresentable {}
extension VisaNetSDK.DataChannelType : Swift.Equatable {}
extension VisaNetSDK.DataChannelType : Swift.Hashable {}
extension VisaNetSDK.DataChannelType : Swift.RawRepresentable {}
extension VisaNetSDK.DocumentType : Swift.Equatable {}
extension VisaNetSDK.DocumentType : Swift.Hashable {}
extension VisaNetSDK.DocumentType : Swift.RawRepresentable {}
extension VisaNetSDK.RequestMethod : Swift.Equatable {}
extension VisaNetSDK.RequestMethod : Swift.Hashable {}
extension VisaNetSDK.RequestMethod : Swift.RawRepresentable {}
extension VisaNetSDK.ResponseType : Swift.Equatable {}
extension VisaNetSDK.ResponseType : Swift.Hashable {}
extension VisaNetSDK.ResponseType : Swift.RawRepresentable {}
extension VisaNetSDK.RecurrenceTypeConst : Swift.Equatable {}
extension VisaNetSDK.RecurrenceTypeConst : Swift.Hashable {}
extension VisaNetSDK.RecurrenceTypeConst : Swift.RawRepresentable {}
extension VisaNetSDK.Signature.DigestType : Swift.Equatable {}
extension VisaNetSDK.Signature.DigestType : Swift.Hashable {}
extension VisaNetSDK.ExpirationDateFieldType : Swift.Equatable {}
extension VisaNetSDK.ExpirationDateFieldType : Swift.Hashable {}
extension VisaNetSDK.ExpirationDateFieldType : Swift.RawRepresentable {}
extension VisaNetSDK.HeaderLogoType : Swift.Equatable {}
extension VisaNetSDK.HeaderLogoType : Swift.Hashable {}
extension VisaNetSDK.HeaderLogoType : Swift.RawRepresentable {}
